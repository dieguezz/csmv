{"version":3,"sources":["../../../client/components/socket/socket.service.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CACtB,OAAO,CAAC,QAAQ,EAAE,UAAS,aAAa,EAAE;;;AAGzC,MAAI,QAAQ,GAAG,EAAE,CAAC,EAAE,EAAE;;;AAGpB,QAAI,EAAE,mBAAmB;GAC1B,CAAC,CAAC;;AAEH,MAAI,MAAM,GAAG,aAAa,CAAC;AACzB,YAAQ,EAAE,QAAQ;GACnB,CAAC,CAAC;;AAEH,SAAO;AACL,UAAM,EAAE,MAAM;;;;;;;;;;;;AAYd,eAAW,EAAE,qBAAU,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;AAC3C,QAAE,GAAG,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC;;;;;AAKxB,YAAM,CAAC,EAAE,CAAC,SAAS,GAAG,OAAO,EAAE,UAAU,IAAI,EAAE;AAC7C,YAAI,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;AAC7C,YAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnC,YAAI,KAAK,GAAG,SAAS,CAAC;;;;AAItB,YAAI,OAAO,EAAE;AACX,eAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7B,eAAK,GAAG,SAAS,CAAC;SACnB,MAAM;AACL,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;;AAED,UAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;OACxB,CAAC,CAAC;;;;;AAKH,YAAM,CAAC,EAAE,CAAC,SAAS,GAAG,SAAS,EAAE,UAAU,IAAI,EAAE;AAC/C,YAAI,KAAK,GAAG,SAAS,CAAC;AACtB,SAAC,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;AACjC,UAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;OACxB,CAAC,CAAC;KACJ;;;;;;;AAOD,iBAAa,EAAE,uBAAU,SAAS,EAAE;AAClC,YAAM,CAAC,kBAAkB,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;AAC/C,YAAM,CAAC,kBAAkB,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;KAClD;GACF,CAAC;CACH,CAAC,CAAC","file":"socket.service.js","sourcesContent":["/* global io */\n'use strict';\n\nangular.module('csmvApp')\n  .factory('socket', function(socketFactory) {\n\n    // socket.io now auto-configures its connection when we ommit a connection url\n    var ioSocket = io('', {\n      // Send auth token on connection, you will need to DI the Auth service above\n      // 'query': 'token=' + Auth.getToken()\n      path: '/socket.io-client'\n    });\n\n    var socket = socketFactory({\n      ioSocket: ioSocket\n    });\n\n    return {\n      socket: socket,\n\n      /**\n       * Register listeners to sync an array with updates on a model\n       *\n       * Takes the array we want to sync, the model name that socket updates are sent from,\n       * and an optional callback function after new items are updated.\n       *\n       * @param {String} modelName\n       * @param {Array} array\n       * @param {Function} cb\n       */\n      syncUpdates: function (modelName, array, cb) {\n        cb = cb || angular.noop;\n\n        /**\n         * Syncs item creation/updates on 'model:save'\n         */\n        socket.on(modelName + ':save', function (item) {\n          var oldItem = _.find(array, {_id: item._id});\n          var index = array.indexOf(oldItem);\n          var event = 'created';\n\n          // replace oldItem if it exists\n          // otherwise just add item to the collection\n          if (oldItem) {\n            array.splice(index, 1, item);\n            event = 'updated';\n          } else {\n            array.push(item);\n          }\n\n          cb(event, item, array);\n        });\n\n        /**\n         * Syncs removed items on 'model:remove'\n         */\n        socket.on(modelName + ':remove', function (item) {\n          var event = 'deleted';\n          _.remove(array, {_id: item._id});\n          cb(event, item, array);\n        });\n      },\n\n      /**\n       * Removes listeners for a models updates on the socket\n       *\n       * @param modelName\n       */\n      unsyncUpdates: function (modelName) {\n        socket.removeAllListeners(modelName + ':save');\n        socket.removeAllListeners(modelName + ':remove');\n      }\n    };\n  });\n"]}