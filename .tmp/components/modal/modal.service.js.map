{"version":3,"sources":["../../../client/components/modal/modal.service.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CACtB,OAAO,CAAC,OAAO,EAAE,UAAU,UAAU,EAAE,MAAM,EAAE;;;;;;;AAO9C,WAAS,SAAS,CAAC,KAAK,EAAE,UAAU,EAAE;AACpC,QAAI,UAAU,GAAG,UAAU,CAAC,IAAI,EAAE,CAAC;AACnC,SAAK,GAAG,KAAK,IAAI,EAAE,CAAC;AACpB,cAAU,GAAG,UAAU,IAAI,eAAe,CAAC;;AAE3C,WAAO,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;;AAElC,WAAO,MAAM,CAAC,IAAI,CAAC;AACjB,iBAAW,EAAE,6BAA6B;AAC1C,iBAAW,EAAE,UAAU;AACvB,WAAK,EAAE,UAAU;KAClB,CAAC,CAAC;GACJ;;;AAGD,SAAO;;;AAGL,WAAO,EAAE;;;;;;;AAOP,gBAAQ,iBAAS,GAAG,EAAE;AACpB,WAAG,GAAG,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC;;;;;;;AAO1B,eAAO,YAAW;AAChB,cAAI,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;cAC5C,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE;cACnB,WAAW,CAAC;;AAEhB,qBAAW,GAAG,SAAS,CAAC;AACtB,iBAAK,EAAE;AACL,yBAAW,EAAE,IAAI;AACjB,mBAAK,EAAE,gBAAgB;AACvB,kBAAI,EAAE,6CAA6C,GAAG,IAAI,GAAG,iBAAiB;AAC9E,qBAAO,EAAE,CAAC;AACR,uBAAO,EAAE,YAAY;AACrB,oBAAI,EAAE,QAAQ;AACd,qBAAK,EAAE,eAAS,CAAC,EAAE;AACjB,6BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACtB;eACF,EAAE;AACD,uBAAO,EAAE,aAAa;AACtB,oBAAI,EAAE,QAAQ;AACd,qBAAK,EAAE,eAAS,CAAC,EAAE;AACjB,6BAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACxB;eACF,CAAC;aACH;WACF,EAAE,cAAc,CAAC,CAAC;;AAEnB,qBAAW,CAAC,MAAM,CAAC,IAAI,CAAC,UAAS,KAAK,EAAE;AACtC,eAAG,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;WACxB,CAAC,CAAC;SACJ,CAAC;OACH;KACF;GACF,CAAC;CACH,CAAC,CAAC","file":"modal.service.js","sourcesContent":["'use strict';\n\nangular.module('csmvApp')\n  .factory('Modal', function ($rootScope, $modal) {\n    /**\n     * Opens a modal\n     * @param  {Object} scope      - an object to be merged with modal's scope\n     * @param  {String} modalClass - (optional) class(es) to be applied to the modal\n     * @return {Object}            - the instance $modal.open() returns\n     */\n    function openModal(scope, modalClass) {\n      var modalScope = $rootScope.$new();\n      scope = scope || {};\n      modalClass = modalClass || 'modal-default';\n\n      angular.extend(modalScope, scope);\n\n      return $modal.open({\n        templateUrl: 'components/modal/modal.html',\n        windowClass: modalClass,\n        scope: modalScope\n      });\n    }\n\n    // Public API here\n    return {\n\n      /* Confirmation modals */\n      confirm: {\n\n        /**\n         * Create a function to open a delete confirmation modal (ex. ng-click='myModalFn(name, arg1, arg2...)')\n         * @param  {Function} del - callback, ran when delete is confirmed\n         * @return {Function}     - the function to open the modal (ex. myModalFn)\n         */\n        delete: function(del) {\n          del = del || angular.noop;\n\n          /**\n           * Open a delete confirmation modal\n           * @param  {String} name   - name or info to show on modal\n           * @param  {All}           - any additional args are passed straight to del callback\n           */\n          return function() {\n            var args = Array.prototype.slice.call(arguments),\n                name = args.shift(),\n                deleteModal;\n\n            deleteModal = openModal({\n              modal: {\n                dismissable: true,\n                title: 'Confirm Delete',\n                html: '<p>Are you sure you want to delete <strong>' + name + '</strong> ?</p>',\n                buttons: [{\n                  classes: 'btn-danger',\n                  text: 'Delete',\n                  click: function(e) {\n                    deleteModal.close(e);\n                  }\n                }, {\n                  classes: 'btn-default',\n                  text: 'Cancel',\n                  click: function(e) {\n                    deleteModal.dismiss(e);\n                  }\n                }]\n              }\n            }, 'modal-danger');\n\n            deleteModal.result.then(function(event) {\n              del.apply(event, args);\n            });\n          };\n        }\n      }\n    };\n  });\n"]}