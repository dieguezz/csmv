{"version":3,"sources":["../../../client/components/util/util.service.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,CAAC,YAAW;;;;;AAKZ,WAAS,WAAW,CAAC,OAAO,EAAE;;AAE5B,QAAI,IAAI,GAAG;;;;;;;;AAQT,YAAM,EAAE,gBAAS,EAAE,EAAE;AACnB,eAAO,AAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,GAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;OACrD;;;;;;;;AAQD,cAAQ,EAAE,kBAAS,GAAG,EAAE;AACtB,YAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;AACpC,SAAC,CAAC,IAAI,GAAG,GAAG,CAAC;AACb,eAAO,CAAC,CAAC;OACV;;;;;;;;;AASD,kBAAY,EAAE,sBAAS,GAAG,EAAE,OAAO,EAAE;AACnC,WAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AACzB,eAAO,GAAG,AAAC,OAAO,IAAI,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAK,EAAE,CAAC;AAChD,eAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrC,eAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,eAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAS,CAAC,EAAE;AACnC,iBAAO,GAAG,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,IAChC,GAAG,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,IACnB,GAAG,CAAC,QAAQ,KAAK,CAAC,CAAC,QAAQ,CAAC;SAC/B,CAAC,CAAC;AACH,eAAQ,OAAO,CAAC,MAAM,IAAI,CAAC,CAAE;OAC9B;;KAEF,CAAC;;AAEF,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,CAAC,MAAM,CAAC,cAAc,CAAC,CAC3B,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;CAE/B,CAAA,EAAG,CAAC","file":"util.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n/**\n * The Util service is for thin, globally reusable, utility functions\n */\nfunction UtilService($window) {\n\n  var Util = {\n\n    /**\n     * Return a callback or noop function\n     *\n     * @param  {Function|*} cb - a 'potential' function\n     * @return {Function}\n     */\n    safeCb: function(cb) {\n      return (angular.isFunction(cb)) ? cb : angular.noop;\n    },\n\n    /**\n     * Parse a given url with the use of an anchor element\n     *\n     * @param  {String} url - the url to parse\n     * @return {Object}     - the parsed url, anchor element\n     */\n    urlParse: function(url) {\n      var a = document.createElement('a');\n      a.href = url;\n      return a;\n    },\n\n    /**\n     * Test whether or not a given url is same origin\n     *\n     * @param  {String}           url       - url to test\n     * @param  {String|String[]}  [origins] - additional origins to test against\n     * @return {Boolean}                    - true if url is same origin\n     */\n    isSameOrigin: function(url, origins) {\n      url = Util.urlParse(url);\n      origins = (origins && [].concat(origins)) || [];\n      origins = origins.map(Util.urlParse);\n      origins.push($window.location);\n      origins = origins.filter(function(o) {\n        return url.hostname === o.hostname &&\n          url.port === o.port &&\n          url.protocol === o.protocol;\n      });\n      return (origins.length >= 1);\n    }\n\n  };\n\n  return Util;\n}\n\nangular.module('csmvApp.util')\n  .factory('Util', UtilService);\n\n})();\n"]}